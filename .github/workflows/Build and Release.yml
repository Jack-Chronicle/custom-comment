name: Build and Auto Release

on:
  push:
    branches:
      - master

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.set_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Check if version was changed manually in this push
      - name: Check if package.json version was changed in this push
        id: check_version
        run: |
          git fetch origin master
          CHANGED=$(git diff origin/master...HEAD -- package.json)
          echo "$CHANGED"
          if echo "$CHANGED" | grep '"version":'; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      # Set up PAT for pushing to repo
      - name: Set up PAT for pushing to repo
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git

      # Conditionally bump patch version or just get the current one (strip leading "v" if present)
      - name: Bump patch version if needed & output version for later jobs
        id: set_version
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          if [ "${{ steps.check_version.outputs.version_changed }}" = "false" ]; then
            npm version patch --no-git-tag-version -m "chore: bump version to %s [skip ci]"
            NEW_VER=$(node -p "require('./package.json').version")
            git commit -a -m "chore: bump version to $NEW_VER [skip ci]"
            git tag "$NEW_VER"
            git push origin HEAD:master --tags
          else
            NEW_VER=$(node -p "require('./package.json').version")
          fi
          echo "new_version=$NEW_VER" >> $GITHUB_OUTPUT

      # Update manifest.json version to match
      - name: Update manifest.json version
        run: |
          VERSION="${{ steps.set_version.outputs.new_version }}"
          node -e "
            const fs = require('fs');
            const m = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
            m.version = process.env.VERSION;
            fs.writeFileSync('manifest.json', JSON.stringify(m, null, 2) + '\n');
          "
        env:
          VERSION: ${{ steps.set_version.outputs.new_version }}

      # Commit and push manifest version bump
      - name: Commit manifest version bump
        run: |
          git add manifest.json
          git commit -m "chore: update manifest.json version to $VERSION [skip ci]" || echo "No changes to commit"
          git push origin HEAD:master
        env:
          VERSION: ${{ steps.set_version.outputs.new_version }}

      - run: npm ci
      - run: npm run build

      - name: Upload plugin files
        uses: actions/upload-artifact@v4
        with:
          name: obsidian-plugin-build
          path: |
            main.js
            manifest.json
            styles.css

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && needs.build.outputs.new_version != ''
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: obsidian-plugin-build
          path: ./release

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.new_version }}
          name: Release ${{ needs.build.outputs.new_version }}
          body: |
            Automated release of version ${{ needs.build.outputs.new_version }}.
          files: release/*
